using System.Collections.Generic;
using Game.Components;
using Pool;
//using UnityEngine.AddressableAssets;
//using UnityEngine.ResourceManagement;
using Unity.Entities;
using Unity.Mathematics;
using Unity.Transforms;
using UnityEngine;

namespace Game.Systems.Ai
{
    
    public class TracerSystem : ComponentSystem
    {
        private EntityQuery ActiveGroup;
        //private IAsyncOperation<GameObject> vtest;
        private GameObject TracerGameobjectRef;
        private List<GameObject> TracerPool = new List<GameObject>();
        private int TracerCount = 1;

        protected override void OnCreateManager()
        {
            EntityQueryDesc query = new EntityQueryDesc
            {
                All = new ComponentType[]{ typeof(TracerComponent), typeof(MoveSpeed), typeof(LimitDistance)},
                //None = new ComponentType[]{ typeof(Disabled)}
            };
            
            ActiveGroup = GetEntityQuery(query);
            
            //Addressables.Instantiate<GameObject>("Assets/Prefabs/Effects/Tracer.prefab");
            //Addressables.LoadAsset<GameObject>("Assets/Prefabs/Effects/Tracer.prefab").Completed += OnLoadDone;
            
        }
        
        /*
        private void OnLoadDone(UnityEngine.ResourceManagement.IAsyncOperation<GameObject> obj)
        {
            // In a production environment, you should add exception handling to catch scenarios such as a null result;
            TracerGameobjectRef = obj.Result;
            //TracerGameobjectRef.name = "Tracer";
            //
            InstantiateTracerPool();
        }
        */

        private void InstantiateTracerPool()
        {
            for (int i = 0; i < TracerCount; i++)
            {
                var t = GameObject.Instantiate(TracerGameobjectRef);
                TracerPool.Add(t);
                t.SetActive(false);
            }
        }

        public void ReleaseTracer(Vector3 pos, Quaternion rot, float dist, float speed)
        {
            //pos = Vector3.one * Random.Range(1, 3);
            //speed = Random.Range(25, 250);
            //dist = Random.Range(50, 100);
            //rot = Random.rotation;
            if (TracerPool != null) 
            {
                var gameObject = ObjectPooler.Free(TracerPool, pos, rot);
            
                if (gameObject == null)
                    return;
            
                gameObject.SetActive(true);
                //EditorApplication.isPaused = true;
                //var e = EntityManager.GetComponentObject<Transform>(ent).gameObject;
                
                //reset entity and give it proper vars
                var entity = gameObject.GetComponent<GameObjectEntity>().Entity;
                
                if (EntityManager.HasComponent(entity, typeof(Disabled)))
                {
                    EntityManager.RemoveComponent<Disabled>(entity);
                }
                
                EntityManager.SetComponentData<Translation>(entity, new Translation{ Value = pos});
                EntityManager.SetComponentData<Rotation>(entity, new Rotation{ Value = rot});
                EntityManager.SetComponentData<MoveSpeed>(entity, new MoveSpeed{ Value = speed});
                EntityManager.SetComponentData<LimitDistance>(entity, new LimitDistance
                {
                    Value       = pos,
                    MaxDistance = dist
                });

            }

        }
        
        protected override void OnUpdate()
        {
            //Debug.Log("hurhur");
            
            if (Input.GetKey(KeyCode.Space))
            {
                //Debug.Log("huzzah");
                ReleaseTracer(Vector3.one, quaternion.identity, 55, 11);
                //ReleaseTracer(Vector3.one, quaternion.identity, 55,11);
            }
            //return;
            /*
            ForEach((Entity entity, TracerComponent tracer, ref MoveSpeed moveSpeed) =>
                {
                    tracer.Elapsed += Time.fixedDeltaTime;
                    
                    if(tracer.Elapsed>= tracer.DisableTime)
                        tracer.gameObject.SetActive(false);
                    
                }, ActiveGroup);
                */
            
        }

   

        
    }
    
    

    
}
