using System.Collections;
using System.Collections.Generic;
using Game.Components;
using Unity.Collections;
using Unity.Entities;
using Unity.Jobs;
using UnityEditor;
using UnityEngine;

public struct TryDetach : IComponentData { }
public struct HasDetached : IComponentData { }


public class DetachableSystem : ComponentSystem
{
    private ComponentGroup m_decoupleGroup;
    private ComponentGroup m_bootstrapGroup;

    protected override void OnCreateManager()
    {
        var query = new EntityQueryDesc
        {
            //All  = new ComponentType[]{  },
            All = new ComponentType[]{ ComponentType.ReadOnly<DetachableWeapon>(),ComponentType.ReadOnly<TryDetach>() },
            None = new ComponentType[]{ typeof(HasDetached) },
        };
        m_decoupleGroup = GetEntityQuery(query);
        
        var bootstrapQuery = new EntityQueryDesc
        {
            //All  = new ComponentType[]{  },
            All = new ComponentType[]{ ComponentType.ReadOnly<DetachableWeapon>(),ComponentType.ReadOnly<SpawnState>(), ComponentType.ReadWrite<Detachable>()  },
        };
        m_bootstrapGroup = GetEntityQuery(bootstrapQuery);

    }

    protected override void OnUpdate()
    {
        //Bootstrap
        ForEach((Entity entity, DetachableWeapon weapon, ref Detachable detachable) =>
        {
#if UNITY_EDITOR
            EntityManager.SetName(entity, weapon.name + "_" + entity);
#endif
            
            detachable.Parent = weapon.Entity;
            PostUpdateCommands.RemoveComponent<SpawnState>(entity);
            
        }, m_bootstrapGroup); 
        
        //Decouple
        ForEach((Entity entity, DetachableWeapon weapon) =>
        {
            //Debug.Log("Detaching");
            
            weapon.Decouple();
            PostUpdateCommands.AddComponent(entity, new HasDetached());

        }, m_decoupleGroup);
    }
}


public class DetachSystem : JobComponentSystem
{   
    private ComponentGroup deadGroup;
    
    private EndSimulationEntityCommandBufferSystem m_bufferSystem;
    private ComponentGroup m_bootstrapGroup;

    protected override void OnCreateManager()
    {
        deadGroup = GetEntityQuery( ComponentType.ReadOnly<Dead>());
        
        var bootstrapQuery = new EntityQueryDesc
        {
            //All  = new ComponentType[]{  },
            All = new ComponentType[]{ ComponentType.ReadOnly<DetachableWeapon>(),ComponentType.ReadOnly<SpawnState>(), ComponentType.ReadWrite<Detachable>()  },
        };
        m_bootstrapGroup = GetEntityQuery(bootstrapQuery);
        m_bufferSystem   = World.Active.GetOrCreateManager<EndSimulationEntityCommandBufferSystem>();


    }
    
    protected override JobHandle OnUpdate(JobHandle inputDeps)
    {
        var findDeadJob = new FindDeadOwners
        {
            CommandBuffer = m_bufferSystem.CreateCommandBuffer().ToConcurrent(),
            DeadEntity    = deadGroup.ToEntityArray(Allocator.TempJob)
        };
        var findDeadHandle = findDeadJob.Schedule(this, inputDeps);
        findDeadHandle.Complete();
        
        return findDeadHandle;
    }
    

    
    [ExcludeComponent(typeof(HasDetached), typeof(TryDetach))]
    struct FindDeadOwners : IJobForEachWithEntity<Detachable>
    {
        public EntityCommandBuffer.Concurrent CommandBuffer;
        [DeallocateOnJobCompletion] [ReadOnly] public NativeArray<Entity> DeadEntity;
        
        public void Execute(Entity entity, int index, ref Detachable detachable)
        {
            for (int i = 0; i < DeadEntity.Length; i++)
            {
                if(DeadEntity[i].Equals(detachable.Parent))
                    CommandBuffer.AddComponent(index, entity, new TryDetach());
            }
        }
    }
    
}
